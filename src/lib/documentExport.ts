// Document export utilities for various formats

export interface ExportOptions {
  format: "pdf" | "docx" | "txt" | "html";
  template?: "business" | "corporate" | "minimal";
  includeImages?: boolean;
  addBranding?: boolean;
}

export interface DocumentData {
  title: string;
  content: string;
  author?: string;
  createdAt: Date;
  agent?: string;
  images?: string[];
  metadata?: Record<string, any>;
}

export class DocumentExporter {
  
  async exportDocument(data: DocumentData, options: ExportOptions): Promise<Blob> {
    switch (options.format) {
      case "pdf":
        return this.exportToPDF(data, options);
      case "docx":
        return this.exportToWord(data, options);
      case "html":
        return this.exportToHTML(data, options);
      case "txt":
        return this.exportToText(data, options);
      default:
        throw new Error(`Unsupported format: ${options.format}`);
    }
  }

  private async exportToPDF(data: DocumentData, options: ExportOptions): Promise<Blob> {
    // Using jsPDF for client-side PDF generation
    const { jsPDF } = await import('jspdf');
    
    const doc = new jsPDF({
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4'
    });

    // Add e& branding if requested
    if (options.addBranding) {
      this.addBrandingToPDF(doc);
    }

    // Add title
    doc.setFontSize(20);
    doc.setTextColor(227, 6, 19); // e& red
    doc.text(data.title, 20, 30);

    // Add metadata
    doc.setFontSize(10);
    doc.setTextColor(100, 100, 100);
    doc.text(`Generated by: ${data.agent || 'e& AI Assistant'}`, 20, 40);
    doc.text(`Created: ${data.createdAt.toLocaleDateString()}`, 20, 45);

    // Add content
    doc.setFontSize(12);
    doc.setTextColor(0, 0, 0);
    
    const splitContent = doc.splitTextToSize(data.content, 170);
    doc.text(splitContent, 20, 60);

    // Add images if included
    if (options.includeImages && data.images) {
      let yPosition = 60 + (splitContent.length * 5) + 20;
      
      for (const imageUrl of data.images) {
        try {
          // For SVG images, we'd need to convert them first
          if (imageUrl.includes('data:image/svg')) {
            doc.text('Generated Image (SVG format)', 20, yPosition);
            yPosition += 10;
          } else {
            doc.addImage(imageUrl, 'PNG', 20, yPosition, 80, 60);
            yPosition += 70;
          }
        } catch (error) {
          console.error('Error adding image to PDF:', error);
        }
      }
    }

    // Add footer
    doc.setFontSize(8);
    doc.setTextColor(150, 150, 150);
    doc.text('Generated by e& GTM Director Portal - mrmelo.com', 20, 280);

    return doc.output('blob');
  }

  private async exportToWord(data: DocumentData, options: ExportOptions): Promise<Blob> {
    // For Word export, we'll create an HTML document that can be opened in Word
    const html = this.generateWordHTML(data, options);
    
    return new Blob([html], {
      type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
    });
  }

  private async exportToHTML(data: DocumentData, options: ExportOptions): Promise<Blob> {
    const html = this.generateHTML(data, options);
    
    return new Blob([html], {
      type: 'text/html'
    });
  }

  private async exportToText(data: DocumentData, options: ExportOptions): Promise<Blob> {
    let text = `${data.title}\n`;
    text += `Generated by: ${data.agent || 'e& AI Assistant'}\n`;
    text += `Created: ${data.createdAt.toLocaleDateString()}\n`;
    text += `\n${'-'.repeat(50)}\n\n`;
    text += data.content;
    
    if (options.addBranding) {
      text += `\n\n${'-'.repeat(50)}\n`;
      text += `Generated by e& GTM Director Portal - mrmelo.com`;
    }
    
    return new Blob([text], {
      type: 'text/plain'
    });
  }

  private addBrandingToPDF(doc: any) {
    // Add e& logo area (placeholder)
    doc.setFillColor(227, 6, 19); // e& red
    doc.rect(170, 10, 30, 15, 'F');
    
    doc.setFontSize(12);
    doc.setTextColor(255, 255, 255);
    doc.text('e&', 180, 20);
  }

  private generateHTML(data: DocumentData, options: ExportOptions): string {
    const brandingStyles = options.addBranding ? `
      <style>
        body { font-family: Arial, sans-serif; margin: 40px; }
        .header { border-bottom: 3px solid #E30613; padding-bottom: 10px; margin-bottom: 20px; }
        .title { color: #E30613; font-size: 24px; font-weight: bold; }
        .meta { color: #666; font-size: 12px; margin: 10px 0; }
        .content { line-height: 1.6; margin: 20px 0; }
        .footer { border-top: 1px solid #ddd; padding-top: 10px; margin-top: 40px; font-size: 10px; color: #999; }
        .images { margin: 20px 0; }
        .images img { max-width: 100%; margin: 10px 0; border: 1px solid #ddd; }
      </style>
    ` : '';

    const imagesHtml = options.includeImages && data.images ? 
      `<div class="images">${data.images.map(img => 
        `<img src="${img}" alt="Generated content" />`
      ).join('')}</div>` : '';

    return `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="UTF-8">
        <title>${data.title}</title>
        ${brandingStyles}
      </head>
      <body>
        <div class="header">
          <div class="title">${data.title}</div>
          <div class="meta">
            Generated by: ${data.agent || 'e& AI Assistant'}<br>
            Created: ${data.createdAt.toLocaleDateString()}
          </div>
        </div>
        
        <div class="content">
          ${data.content.replace(/\n/g, '<br>')}
        </div>
        
        ${imagesHtml}
        
        ${options.addBranding ? 
          '<div class="footer">Generated by e& GTM Director Portal - mrmelo.com</div>' : ''
        }
      </body>
      </html>
    `;
  }

  private generateWordHTML(data: DocumentData, options: ExportOptions): string {
    // Generate HTML that's optimized for Word import
    return `
      <html xmlns:o="urn:schemas-microsoft-com:office:office" 
            xmlns:w="urn:schemas-microsoft-com:office:word" 
            xmlns="http://www.w3.org/TR/REC-html40">
      <head>
        <meta charset="utf-8">
        <title>${data.title}</title>
        <!--[if gte mso 9]>
        <xml>
          <w:WordDocument>
            <w:View>Print</w:View>
            <w:Zoom>90</w:Zoom>
            <w:DoNotPromptForConvert/>
            <w:DoNotShowInsertionsAndDeletions/>
          </w:WordDocument>
        </xml>
        <![endif]-->
        <style>
          body { font-family: Arial, sans-serif; font-size: 11pt; }
          h1 { color: #E30613; font-size: 18pt; }
          .meta { color: #666666; font-size: 9pt; }
        </style>
      </head>
      <body>
        <h1>${data.title}</h1>
        <p class="meta">Generated by: ${data.agent || 'e& AI Assistant'}</p>
        <p class="meta">Created: ${data.createdAt.toLocaleDateString()}</p>
        <hr>
        <div>${data.content.replace(/\n/g, '</p><p>')}</div>
        ${options.addBranding ? 
          '<hr><p style="font-size: 8pt; color: #999;">Generated by e& GTM Director Portal - mrmelo.com</p>' : ''
        }
      </body>
      </html>
    `;
  }

  downloadBlob(blob: Blob, filename: string) {
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  }
}

export const documentExporter = new DocumentExporter();
