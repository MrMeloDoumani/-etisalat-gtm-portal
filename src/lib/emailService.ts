interface EmailOptions {
  to: string | string[];
  subject: string;
  content: string;
  attachments?: Array<{
    filename: string;
    content: string; // base64 encoded
    type: string;
  }>;
  template?: 'business' | 'marketing' | 'notification';
}

interface EmailTemplate {
  subject: string;
  html: string;
  text: string;
}

export class EmailService {
  private apiKey: string;
  private fromEmail: string;

  constructor() {
    this.apiKey = process.env.SENDGRID_API_KEY || "";
    this.fromEmail = process.env.FROM_EMAIL || "noreply@etisalat.ae";
  }

  async sendEmail(options: EmailOptions): Promise<{ success: boolean; messageId?: string; error?: string }> {
    try {
      if (!this.apiKey) {
        // Fallback to mock email for demo
        return this.sendMockEmail(options);
      }

      const template = this.getTemplate(options.template || 'business');
      const emailData = {
        personalizations: [{
          to: Array.isArray(options.to) ? options.to.map(email => ({ email })) : [{ email: options.to }],
          subject: options.subject || template.subject
        }],
        from: { email: this.fromEmail, name: "e& GTM Director Portal" },
        content: [
          {
            type: "text/html",
            value: this.processTemplate(template.html, options)
          },
          {
            type: "text/plain", 
            value: this.processTemplate(template.text, options)
          }
        ],
        attachments: options.attachments?.map(att => ({
          content: att.content,
          filename: att.filename,
          type: att.type,
          disposition: "attachment"
        }))
      };

      const response = await fetch('https://api.sendgrid.com/v3/mail/send', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(emailData)
      });

      if (response.ok) {
        const messageId = response.headers.get('X-Message-Id');
        return { success: true, messageId: messageId || undefined };
      } else {
        const error = await response.text();
        return { success: false, error };
      }

    } catch (error) {
      console.error('Email sending failed:', error);
      return { success: false, error: error instanceof Error ? error.message : 'Unknown error' };
    }
  }

  private async sendMockEmail(options: EmailOptions): Promise<{ success: boolean; messageId?: string; error?: string }> {
    // Mock email for demo purposes
    console.log('ðŸ“§ Mock Email Sent:', {
      to: options.to,
      subject: options.subject,
      content: options.content.substring(0, 100) + '...',
      attachments: options.attachments?.length || 0
    });

    return {
      success: true,
      messageId: `mock-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`
    };
  }

  private getTemplate(type: string): EmailTemplate {
    const templates = {
      business: {
        subject: "e& Business Update",
        html: `
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>e& Business Communication</title>
            <style>
              body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; margin: 0; padding: 20px; }
              .header { background: #E30613; color: white; padding: 20px; text-align: center; }
              .content { padding: 20px; background: #f9f9f9; }
              .footer { background: #333; color: white; padding: 15px; text-align: center; font-size: 12px; }
              .button { background: #E30613; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; display: inline-block; margin: 10px 0; }
            </style>
          </head>
          <body>
            <div class="header">
              <h1>e& Business Solutions</h1>
              <p>Empowering Your Digital Transformation</p>
            </div>
            <div class="content">
              {{CONTENT}}
            </div>
            <div class="footer">
              <p>Â© 2024 e& UAE. All rights reserved.</p>
              <p>Generated by e& GTM Director Portal - mrmelo.com</p>
            </div>
          </body>
          </html>
        `,
        text: `
e& Business Solutions
Empowering Your Digital Transformation

{{CONTENT}}

---
Â© 2024 e& UAE. All rights reserved.
Generated by e& GTM Director Portal - mrmelo.com
        `
      },
      marketing: {
        subject: "New Marketing Campaign Ready",
        html: `
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Marketing Campaign</title>
            <style>
              body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; margin: 0; padding: 20px; }
              .header { background: linear-gradient(135deg, #E30613, #FF6B6B); color: white; padding: 30px; text-align: center; }
              .content { padding: 30px; background: white; }
              .cta { text-align: center; margin: 30px 0; }
              .button { background: #E30613; color: white; padding: 15px 30px; text-decoration: none; border-radius: 25px; display: inline-block; font-weight: bold; }
            </style>
          </head>
          <body>
            <div class="header">
              <h1>ðŸš€ New Campaign Ready!</h1>
              <p>Your marketing materials are prepared for launch</p>
            </div>
            <div class="content">
              {{CONTENT}}
            </div>
            <div class="cta">
              <a href="#" class="button">Review Campaign</a>
            </div>
          </body>
          </html>
        `,
        text: `
ðŸš€ New Campaign Ready!
Your marketing materials are prepared for launch

{{CONTENT}}

Review Campaign: [Link]
        `
      },
      notification: {
        subject: "Portal Notification",
        html: `
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="utf-8">
            <title>Portal Notification</title>
            <style>
              body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; margin: 0; padding: 20px; }
              .notification { background: #f0f8ff; border-left: 4px solid #E30613; padding: 20px; margin: 20px 0; }
            </style>
          </head>
          <body>
            <div class="notification">
              {{CONTENT}}
            </div>
          </body>
          </html>
        `,
        text: `Portal Notification\n\n{{CONTENT}}`
      }
    };

    return templates[type as keyof typeof templates] || templates.business;
  }

  private processTemplate(template: string, options: EmailOptions): string {
    return template.replace('{{CONTENT}}', options.content);
  }

  async shareConversation(
    conversationData: any, 
    recipients: string[], 
    message: string = "Shared conversation from e& GTM Portal"
  ): Promise<{ success: boolean; error?: string }> {
    const content = `
${message}

Conversation with ${conversationData.agent}:
${conversationData.messages.map((msg: any) => 
  `${msg.sender === 'user' ? 'You' : conversationData.agent}: ${msg.content}`
).join('\n\n')}

Generated on: ${new Date().toLocaleString()}
    `;

    return await this.sendEmail({
      to: recipients,
      subject: `Shared Conversation: ${conversationData.agent}`,
      content,
      template: 'business'
    });
  }

  async sendProjectUpdate(
    projectData: any, 
    recipients: string[]
  ): Promise<{ success: boolean; error?: string }> {
    const content = `
Project Update: ${projectData.name}

Status: ${projectData.status}
Progress: ${projectData.progress}%
Owner: ${projectData.owner}
Due Date: ${projectData.dueDate}

Recent Updates:
${projectData.updates?.map((update: any) => 
  `â€¢ ${update.date}: ${update.description}`
).join('\n') || 'No recent updates'}

View full project details in the portal.
    `;

    return await this.sendEmail({
      to: recipients,
      subject: `Project Update: ${projectData.name}`,
      content,
      template: 'notification'
    });
  }
}

export const emailService = new EmailService();
